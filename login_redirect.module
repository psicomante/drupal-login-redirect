<?php

/**
 * @file
 * Allows redirects according to an URL parameter after logins.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Component\Utility\String;
use \Drupal\Component\Utility\UrlHelper;


function login_redirect_user_login($account) {
  $config = \Drupal::config('login_redirect.settings');

  // We want to redirect user on login.
  $response = new RedirectResponse($config->get('login_redirect.destination'));
  $response->send();
  return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function login_redirect_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  // It looks like Drupal rebuilds the form post-submission which overwrites
  // the query parameter set first time. We check the $form_state to see if
  // the query parameter is already set.
  // kpr($form_state);
  // if (isset($form_state['input']['login_redirect_destination'])) {
  //   $form['login_redirect_destination'] = array(
  //     '#type' => 'hidden',
  //     '#value' => $form_state['input']['login_redirect_destination'],
  //   );
  // }
  // else {
  //   $config = \Drupal::config('login_redirect.settings');
  //   $status = $config->get('status');
  //   if ($status !== 0) {
  //     $destination = $config->get('destination');
  //     $query = \Drupal::request()->query->all();

  //     if (isset($query[$destination]) && !empty($query[$destination])) {
  //       $redirect = $query[$destination];
  //       $form['login_redirect_destination'] = array(
  //         '#type' => 'hidden',
  //         '#value' => $redirect,
  //       );
  //     }
  //   }
  // }
  $form['#submit'][] = 'login_redirect_user_login_submit';

}

/**
 * Send the user to another page if set in options.
 */
// function login_redirect_user_login_submit(&$form, &$form_state) {
  // if (isset($form_state['input']['login_redirect_destination'])) {
  //   $destination = String::checkPlain(filter_xss($form_state['input']['login_redirect_destination']));
  //   $destination = url($destination,array('absolute' => TRUE));
  //   if (UrlHelper::isValid($destination)) {
  //     $response = new RedirectResponse($destination, 302);
  //     $response->send();
  //     return $response;
  //   }
  // }
// }
