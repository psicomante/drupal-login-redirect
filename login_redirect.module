<?php

/**
 * @file
 * Allows redirects according to an URL parameter after logins.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Component\Utility\String;
use \Drupal\Component\Utility\UrlHelper;

/**
 * Implements of hook_help().
 */
function login_redirect_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#login_redirect':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A simple solution to allow redirects toward non-Drupal URLs after a successful user login.') . '</p>';
      $output .= '<h3>' . t('Author(s):') . '</h3>';
      $output .= '<p>' . t('legendm33066 &lt;http://drupal.org/user/1290564&gt;') . '</p>';

      // Sets "variables" variable which will later be used to generate a list.
      $variables = array();
      $variables['items'] = array(
        l(t('Enable the module'), 'admin/modules'),
        l(t('Configure the module'), 'admin/config/system/login_redirect'));
      $variables['title'] = t('Installation');
      $variables['type'] = 'ul';
      $variables['attributes'] = array('');
      $render_array = array(
        '#theme' => 'item_list',
        '#items' => $variables['items'],
      );
      $output .= drupal_render($render_array);
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Visit the Login page (usually user/login) and append the redirection URL
parameter using the parameter name defined in the <a href="@settings">Settings page</a>.
For example, if you set the parameter name to
"destination", then you would visit user/login?destination=http://www.google.com
to have the user redirected to Google (http://www.google.com) after logging in.', array('@settings' => url('admin/login_redirect/settings'))) . '</p>';
      $output .= '<h3>' . '<font color="red">' . t('Notice') . '</font>' . '</h3>';
      $output .= '<p>' . '<font color="red">' . t('The URL passed parameter ALWAYS overrides the "destination" parameter handled by Drupal itself.') . '</font>' . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function login_redirect_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  // It looks like Drupal rebuilds the form post-submission which overwrites
  // the query parameter set first time. We check the $form_state to see if
  // the query parameter is already set.
  if (isset($form_state['input']['login_redirect_destination'])) {
    $form['login_redirect_destination'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['input']['login_redirect_destination'],
    );
  }
  else {
    $config = \Drupal::config('login_redirect.parameters');
    $status = $config->get('status');
    if ($status !== 0) {
      $parameter_name = $config->get('parameter_name');
      $query = \Drupal::request()->query->all();

      if (isset($query[$parameter_name]) && !empty($query[$parameter_name])) {
        $redirect = $query[$parameter_name];
        $form['login_redirect_destination'] = array(
          '#type' => 'hidden',
          '#value' => $redirect,
        );
      }
    }
  }
  $form['#submit'][] = 'login_redirect_user_login_submit';

}

/**
 * Send the user to another page if set in options.
 */
function login_redirect_user_login_submit(&$form, &$form_state) {
  if (isset($form_state['input']['login_redirect_destination'])) {
    $destination = String::checkPlain(filter_xss($form_state['input']['login_redirect_destination']));
    $destination = url($destination,array('absolute' => TRUE));
    if (UrlHelper::isValid($destination)) {
      $response = new RedirectResponse($destination, 302);
      $response->send();
      return $response;
    }
  }
}
